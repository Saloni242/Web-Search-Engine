https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/ Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Minimum increment or decrement operations required to make the array sorted Minimize the cost of partitioning an array into K groups Count total number of even sum sequences Sum of numbers in a range [L, R] whose count of divisors is prime Find next greater element with no consecutive 1 in it's binary representation Random list of M non-negative integers whose sum is N Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case average time which is lower than the worst case time of a particular expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets and Splay Trees. Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes fast, but space required becomes high. The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase size of table whenever it becomes full. Following are the steps to follow when table becomes full. 1) Allocate memory for a larger table of size, typically twice the old table. 2) Copy the contents of old table to new table. 3) Free the old table. If the table has space available, we simply insert new item in available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst case cost of an insertion is O(n). Therefore, worst case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don’t take Θ(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java. Following are few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn’t involve probability. There is also another different notion of average case running time where algorithms use randomization to make them faster and expected running time is faster than the worst case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. Sources: Berkeley Lecture 35: Amortized Analysis MIT Lecture 13: Amortized Algorithms, Table Doubling, Potential Method http://www.cs.cornell.edu/courses/cs3110/2011sp/lectures/lec20-amortized/amortized.htm Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Recommended Posts: Amortized analysis for increment in counter Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithms | Big-O analysis Analysis of different sorting techniques Complexity Analysis of Binary Search Difference between Posteriori and Priori analysis Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 5 (Practice Problems) Analysis of algorithms | little o and little omega notations Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Practice Questions on Time Complexity Analysis Asymptotic Analysis and comparison of sorting algorithms Algorithms Sample Questions | Set 3 | Time Order Analysis Article Tags : Analysis thumb_up 27 To-do Done 2.6 Based on 114 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Tail Recursion Next last_page Algorithm Practice Question for Beginners | Set 1 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? What is Competitive Programming and How to Prepare for It? Most Visited Articles I don't like Coding. What should I do to Get a Job in IT? How to Become a Data Scientist in 2019: A Complete Guide How Does Google Use Machine Learning? Most asked Computer Science Subjects Interview Questions in Amazon, Microsoft, Flipkart How to Prepare for Amazon Software Development Engineering Interview? ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reserved