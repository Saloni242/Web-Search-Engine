https://www.geeksforgeeks.org/how-to-crack-system-design-round-in-interviews/?ref=leftbar-rightbar How to Crack System Design Round in Interviews? - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Geek Week – Celebrate The Biggest Programming Festival With GeeksforGeeks I don't like Coding. What should I do to Get a Job in IT? What is Competitive Programming and How to Prepare for It? 7 Common Programming Principles That Every Developer Must Follow SOLID Principle in Programming: Understand With Real Life Examples How to Prepare for Amazon Software Development Engineering Interview? How to Become a Data Scientist in 2019: A Complete Guide How to Become a Data Analyst in 2019: A Complete Guide Best Books to Learn Back-End Web Development 10 Famous Bugs in The Computer Science World How Does Google Use Machine Learning? How Does NASA Use Machine Learning? Top Machine Learning Trends in 2019 Which is better, the GRE or the GATE? How to Protect Yourself From Cyber Attacks? Computer science, an overrated dream Graphene Batteries 10 Tips to Protect Your Online Data Privacy in 2019 Microsoft Windows (10) Vs macOS (Mojave) Interesting Funny Commands in Linux If we delete cookies of a site, we can still logged in without logging again How to Setup Burp Suite for Bug Bounty or Web Application Penetration Testing? Neuralink - A Brain-Computer Interface Technology How to use Emojis in Windows 10? Evolution of Foldable Smartphones Impact of IoT on CyberSecurity How to Transparently Overlaid Two Directories Using UnionFS in Linux? Benefits of Automated Cross-Browser Testing for Online Business Comparing Python with C and C++ How to Crack System Design Round in Interviews? Can you design Netflix in 45 minutes? What??? Are you serious ?? (I can watch it for the whole night but…). It’s impossible to explain even a single component of Netflix and you are asking me to design it within just 45 minutes of a short time?? Yes, this is what you are expected to do in your system design interviews if you want to get your dream job in big tech giant companies. You will have to give a clear explanation about designing these kinds of large scalable distributed systems (like Twitter, Messenger, Netflix, Uber, etc..) to the interviewer. This round may be a challenging and complex round for you because you are supposed to cover all the topics and tradeoffs within this limited time frame which seems to be impossible. We don’t want to make this round scary for you so we will discuss step by step how to clear this round and some useful tips to avoid common mistakes. Let’s try to make it simple and discuss some key points before you start your preparation for this round. Consider your interviewer as a team member and take this round as an opportunity to work with him where you both are supposed to solve a real-world problem related to your company’s goal but here you need to take the ownership and lead everything. The main purpose of this round is to understand how capable you are building a large scale system and your thought process behind designing a service. Clarity of thoughts matter a lot because if you can explain it to the interviewer, you can do this in your team as well. One of the good things for you in this round is that you are supposed to come up with the best solution for all kinds of open-ended problems instead of accurate solutions. Your ability to articulate your thought matters more than the final design you present to them. We hope that from the above points we have simplified a few things for you and make this round a little bit easier for you. Okay, I got it but where to start, where to end, tell me the best way to cover everything step by step within this strict timeframe. We know that it might be an overwhelming round for you so let’s start discussing step by step approach and try to make this round easier for you. 1. Understand the Goal and Gather All the Requirements You need to first understand your end goal before jumping to the solution so gather all the basic requirements from your interviewer. Ask relevant questions to clear your doubts. Design questions are basically open-ended conversation which doesn’t have one correct solution so it’s good to start with some basic assumptions. What’s the end goal of the system or service? Who are the end-users? How they will use the service? What features your interviewer wants you to include and what exclude? What should be the input and its output or final outcome? A product like Facebook, Twitter or Reddit is a well-known product so even if you know how to design such kind of system still it’s your responsibility to share your assumptions and discuss with the interviewer what features they care about and what they don’t. They may want you to include some features which don’t exist in this kind of systems or they may tell you to exclude some features. So make sure you have a better understanding of all the requirements and features. Consider the example of designing twitter. Some of the questions are who can post a tweet? who can read the tweet? who can follow the user? like, comments, pictures, active users, total users and discuss other features your interviewer wants you to include. 2. System Interface Definition and Establish Scope After the first step, you need to identify what kind of APIs your system needs to get the job done based on whatever features you have included. Also, discuss the scope and availability of the system, discuss some relevant questions like do you both care about only end-to-end experience or just the API?. Client support (mobile, web etc). Authentication, analytics, integration, performance, etc. Is the system going to work if the host is down or the entire data system is down? So discuss with the interviewer how much availability he/she care about the system. From both, the above two steps make sure you know the exact scope of the problem and the complexity of the system. 3. Scalability Estimation: You design a service that works for a hundred users, but is it going to work for a thousand users or million users? Is it going to scale and work fine as we add more users or more requests? Basically you need to consider the same feature for different scales and it’s very important to get the right scale because different answer requires a different design. Scalability also helps in load balancing, caching and partitioning so you can ask questions like: What’s the limit of the data or network or bandwidth we need to care about? How much storage do we need? What’s the average response time? 4. Start with High-level Components then move to Detailed Design Start to cover the end to end process based on your goal, so identify each component to solve the actual problem or to implement your complete system. How all the components come together to meet the actual requirement? Below are some quick points to guide you properly while explaining the components: Divide your complete system into 6-7 higher level or core components. Drill down further and discuss the role and responsibility of each component also how they are going to interact or communicate with each other. While explaining the components your interviewer may guide you towards 1-2 components and wants you to explain those components in depth. So there you need to further discuss that in detail. Discuss the frontend, backend, networking, caching, load balancing, queueing, database, external API calls, user interaction, offline processes, etc. Tell the interviewer what are the technologies or database you can use in your system. 5. Tradeoffs and Resolving Bottleneck Design interviews are open-ended conversations so there is no single answer and every decision will have a tradeoff when you will present your architecture and your thought process to the interviewer. The complex system always requires compromises so you need to tell them different approaches, their pros, and cons, and why would you choose one over another. Which database is fit in your system and why? Why would you choose a specific technology in different layers or components. Which frameworks can be good for your design and which one you need to choose? What are the different security options available to keep your data safe and which one you would choose? You also need to think and resolve the bottlenecks like what kind of failure can occur in your system and what’s the solution for that. Do you need to keep a backup or you will take the help of any other resources. Do you have any backup for your data in case your server crashes and you lose the entire data? How would you monitor the performance of the service? If any component fails then what’s the solution to run your system smoothly and properly? Basically you should have an organized and clear plan to deal with all these kinds of critical failures in your system. Quick Tips: Try to follow 80-20 rule during your interview, where 80% of the time you will be speaking and explaining everything and 20% of the time your interviewer. Don’t use buzzwords and pretend to be an expert if you don’t know something. You read some blog posts or few topics today and tomorrow is your interview, during your interview if you throw some buzzwords like “No-SQL”, “Mongo DB” and “Cassandra” then it may backfire you. You can’t make fool to the interviewer who is an industry expert, always consider that your interviewer may ask for more details and justification so if you are using technology X or database Y then “why?”, prepare yourself for this kind of questions. Do not go into detail prematurely. Many times it happens when a candidate starts explaining one part of the system, they go into too much detail of the component and forget about the strict timeframe and other components. Maybe the interviewer wants you to stop somewhere where they don’t need too much detail. So to avoid this mistake wait for the interviewer’s feedback or response. They will give you some hints or will direct you whatever part of the system they want you to explain further. Don’t have a set architecture in mind like MVC or event-driven and try to fit the requirement somehow in that architecture. Maybe it’s not suitable as per the requirement. Requirements may change during the interview to test your flexibility so try to avoid this mistake. Be honest during your interviews and if you have never used technology X then you don’t need to be fake in that situation. Try to find common solutions and show them your honesty, confidence, and willingness to learn something. That will make a good impression on interviewer. Your practical experience, your knowledge, understanding of modern software system and how you express yourself clearly during your interview matters a lot to design a system successfully. Important Links: System Design Course System Design Preparation Cheatsheet Top 10 System Design Interview Questions for Software Engineers System Design Cheatsheet My Personal Notes arrow_drop_up Save Recommended Posts: Automating File Movement on your system Top 5 Common Mistakes in Technical On-site Interviews Beginning BootStrap (Part-2) | Grid System Design data structures for a very large social network like Facebook or Linkedln Design a Keylogger in Python How to get started for technical Interviews? Difference between FAT32, exFAT, and NTFS File System Android System Architecture Layouts in Android UI Design 8 Ways to Shipwreck Your Next Website Design Characteristics of data in geographical information system (GIS) Editors and Its types in System Programming The Tempo Operating System Expected Properties of a Big Data System OOPs | Object Oriented Design anuupadhyay Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlog thumb_up 5 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How Big Data Artificial Intelligence is Changing the Face of Traditional Big Data? Next last_page Brain Machine Interface (BMI) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Convert Directed Graph into a Tree Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? Most Visited Articles I don't like Coding. What should I do to Get a Job in IT? How to Become a Data Analyst in 2019: A Complete Guide What is Competitive Programming and How to Prepare for It? How to Become a Data Scientist in 2019: A Complete Guide Minimum characters that are to be inserted such that no three consecutive characters are same ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/how-to-crack-system-design-round-in-interviews/?ref=leftbar-rightbar How to Crack System Design Round in Interviews? - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Geek Week – Celebrate The Biggest Programming Festival With GeeksforGeeks I don't like Coding. What should I do to Get a Job in IT? What is Competitive Programming and How to Prepare for It? 7 Common Programming Principles That Every Developer Must Follow SOLID Principle in Programming: Understand With Real Life Examples How to Prepare for Amazon Software Development Engineering Interview? How to Become a Data Scientist in 2019: A Complete Guide How to Become a Data Analyst in 2019: A Complete Guide Best Books to Learn Back-End Web Development 10 Famous Bugs in The Computer Science World How Does Google Use Machine Learning? How Does NASA Use Machine Learning? Top Machine Learning Trends in 2019 Which is better, the GRE or the GATE? How to Protect Yourself From Cyber Attacks? Computer science, an overrated dream Graphene Batteries 10 Tips to Protect Your Online Data Privacy in 2019 Microsoft Windows (10) Vs macOS (Mojave) Interesting Funny Commands in Linux If we delete cookies of a site, we can still logged in without logging again How to Setup Burp Suite for Bug Bounty or Web Application Penetration Testing? Neuralink - A Brain-Computer Interface Technology How to use Emojis in Windows 10? Evolution of Foldable Smartphones Impact of IoT on CyberSecurity How to Transparently Overlaid Two Directories Using UnionFS in Linux? Benefits of Automated Cross-Browser Testing for Online Business Comparing Python with C and C++ How to Crack System Design Round in Interviews? Can you design Netflix in 45 minutes? What??? Are you serious ?? (I can watch it for the whole night but…). It’s impossible to explain even a single component of Netflix and you are asking me to design it within just 45 minutes of a short time?? Yes, this is what you are expected to do in your system design interviews if you want to get your dream job in big tech giant companies. You will have to give a clear explanation about designing these kinds of large scalable distributed systems (like Twitter, Messenger, Netflix, Uber, etc..) to the interviewer. This round may be a challenging and complex round for you because you are supposed to cover all the topics and tradeoffs within this limited time frame which seems to be impossible. We don’t want to make this round scary for you so we will discuss step by step how to clear this round and some useful tips to avoid common mistakes. Let’s try to make it simple and discuss some key points before you start your preparation for this round. Consider your interviewer as a team member and take this round as an opportunity to work with him where you both are supposed to solve a real-world problem related to your company’s goal but here you need to take the ownership and lead everything. The main purpose of this round is to understand how capable you are building a large scale system and your thought process behind designing a service. Clarity of thoughts matter a lot because if you can explain it to the interviewer, you can do this in your team as well. One of the good things for you in this round is that you are supposed to come up with the best solution for all kinds of open-ended problems instead of accurate solutions. Your ability to articulate your thought matters more than the final design you present to them. We hope that from the above points we have simplified a few things for you and make this round a little bit easier for you. Okay, I got it but where to start, where to end, tell me the best way to cover everything step by step within this strict timeframe. We know that it might be an overwhelming round for you so let’s start discussing step by step approach and try to make this round easier for you. 1. Understand the Goal and Gather All the Requirements You need to first understand your end goal before jumping to the solution so gather all the basic requirements from your interviewer. Ask relevant questions to clear your doubts. Design questions are basically open-ended conversation which doesn’t have one correct solution so it’s good to start with some basic assumptions. What’s the end goal of the system or service? Who are the end-users? How they will use the service? What features your interviewer wants you to include and what exclude? What should be the input and its output or final outcome? A product like Facebook, Twitter or Reddit is a well-known product so even if you know how to design such kind of system still it’s your responsibility to share your assumptions and discuss with the interviewer what features they care about and what they don’t. They may want you to include some features which don’t exist in this kind of systems or they may tell you to exclude some features. So make sure you have a better understanding of all the requirements and features. Consider the example of designing twitter. Some of the questions are who can post a tweet? who can read the tweet? who can follow the user? like, comments, pictures, active users, total users and discuss other features your interviewer wants you to include. 2. System Interface Definition and Establish Scope After the first step, you need to identify what kind of APIs your system needs to get the job done based on whatever features you have included. Also, discuss the scope and availability of the system, discuss some relevant questions like do you both care about only end-to-end experience or just the API?. Client support (mobile, web etc). Authentication, analytics, integration, performance, etc. Is the system going to work if the host is down or the entire data system is down? So discuss with the interviewer how much availability he/she care about the system. From both, the above two steps make sure you know the exact scope of the problem and the complexity of the system. 3. Scalability Estimation: You design a service that works for a hundred users, but is it going to work for a thousand users or million users? Is it going to scale and work fine as we add more users or more requests? Basically you need to consider the same feature for different scales and it’s very important to get the right scale because different answer requires a different design. Scalability also helps in load balancing, caching and partitioning so you can ask questions like: What’s the limit of the data or network or bandwidth we need to care about? How much storage do we need? What’s the average response time? 4. Start with High-level Components then move to Detailed Design Start to cover the end to end process based on your goal, so identify each component to solve the actual problem or to implement your complete system. How all the components come together to meet the actual requirement? Below are some quick points to guide you properly while explaining the components: Divide your complete system into 6-7 higher level or core components. Drill down further and discuss the role and responsibility of each component also how they are going to interact or communicate with each other. While explaining the components your interviewer may guide you towards 1-2 components and wants you to explain those components in depth. So there you need to further discuss that in detail. Discuss the frontend, backend, networking, caching, load balancing, queueing, database, external API calls, user interaction, offline processes, etc. Tell the interviewer what are the technologies or database you can use in your system. 5. Tradeoffs and Resolving Bottleneck Design interviews are open-ended conversations so there is no single answer and every decision will have a tradeoff when you will present your architecture and your thought process to the interviewer. The complex system always requires compromises so you need to tell them different approaches, their pros, and cons, and why would you choose one over another. Which database is fit in your system and why? Why would you choose a specific technology in different layers or components. Which frameworks can be good for your design and which one you need to choose? What are the different security options available to keep your data safe and which one you would choose? You also need to think and resolve the bottlenecks like what kind of failure can occur in your system and what’s the solution for that. Do you need to keep a backup or you will take the help of any other resources. Do you have any backup for your data in case your server crashes and you lose the entire data? How would you monitor the performance of the service? If any component fails then what’s the solution to run your system smoothly and properly? Basically you should have an organized and clear plan to deal with all these kinds of critical failures in your system. Quick Tips: Try to follow 80-20 rule during your interview, where 80% of the time you will be speaking and explaining everything and 20% of the time your interviewer. Don’t use buzzwords and pretend to be an expert if you don’t know something. You read some blog posts or few topics today and tomorrow is your interview, during your interview if you throw some buzzwords like “No-SQL”, “Mongo DB” and “Cassandra” then it may backfire you. You can’t make fool to the interviewer who is an industry expert, always consider that your interviewer may ask for more details and justification so if you are using technology X or database Y then “why?”, prepare yourself for this kind of questions. Do not go into detail prematurely. Many times it happens when a candidate starts explaining one part of the system, they go into too much detail of the component and forget about the strict timeframe and other components. Maybe the interviewer wants you to stop somewhere where they don’t need too much detail. So to avoid this mistake wait for the interviewer’s feedback or response. They will give you some hints or will direct you whatever part of the system they want you to explain further. Don’t have a set architecture in mind like MVC or event-driven and try to fit the requirement somehow in that architecture. Maybe it’s not suitable as per the requirement. Requirements may change during the interview to test your flexibility so try to avoid this mistake. Be honest during your interviews and if you have never used technology X then you don’t need to be fake in that situation. Try to find common solutions and show them your honesty, confidence, and willingness to learn something. That will make a good impression on interviewer. Your practical experience, your knowledge, understanding of modern software system and how you express yourself clearly during your interview matters a lot to design a system successfully. Important Links: System Design Course System Design Preparation Cheatsheet Top 10 System Design Interview Questions for Software Engineers System Design Cheatsheet My Personal Notes arrow_drop_up Save Recommended Posts: Automating File Movement on your system Top 5 Common Mistakes in Technical On-site Interviews Beginning BootStrap (Part-2) | Grid System Design data structures for a very large social network like Facebook or Linkedln Design a Keylogger in Python How to get started for technical Interviews? Difference between FAT32, exFAT, and NTFS File System Android System Architecture Layouts in Android UI Design 8 Ways to Shipwreck Your Next Website Design Characteristics of data in geographical information system (GIS) Editors and Its types in System Programming The Tempo Operating System Expected Properties of a Big Data System OOPs | Object Oriented Design anuupadhyay Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlog thumb_up 5 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How Big Data Artificial Intelligence is Changing the Face of Traditional Big Data? Next last_page Brain Machine Interface (BMI) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Convert Directed Graph into a Tree Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? Most Visited Articles I don't like Coding. What should I do to Get a Job in IT? How to Become a Data Analyst in 2019: A Complete Guide What is Competitive Programming and How to Prepare for It? How to Become a Data Scientist in 2019: A Complete Guide Minimum characters that are to be inserted such that no three consecutive characters are same ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/how-to-crack-system-design-round-in-interviews/?ref=leftbar-rightbar How to Crack System Design Round in Interviews? - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Geek Week – Celebrate The Biggest Programming Festival With GeeksforGeeks I don't like Coding. What should I do to Get a Job in IT? What is Competitive Programming and How to Prepare for It? 7 Common Programming Principles That Every Developer Must Follow SOLID Principle in Programming: Understand With Real Life Examples How to Prepare for Amazon Software Development Engineering Interview? How to Become a Data Scientist in 2019: A Complete Guide How to Become a Data Analyst in 2019: A Complete Guide Best Books to Learn Back-End Web Development 10 Famous Bugs in The Computer Science World How Does Google Use Machine Learning? How Does NASA Use Machine Learning? Top Machine Learning Trends in 2019 Which is better, the GRE or the GATE? How to Protect Yourself From Cyber Attacks? Computer science, an overrated dream Graphene Batteries 10 Tips to Protect Your Online Data Privacy in 2019 Microsoft Windows (10) Vs macOS (Mojave) Interesting Funny Commands in Linux If we delete cookies of a site, we can still logged in without logging again How to Setup Burp Suite for Bug Bounty or Web Application Penetration Testing? Neuralink - A Brain-Computer Interface Technology How to use Emojis in Windows 10? Evolution of Foldable Smartphones Impact of IoT on CyberSecurity How to Transparently Overlaid Two Directories Using UnionFS in Linux? Benefits of Automated Cross-Browser Testing for Online Business Comparing Python with C and C++ How to Crack System Design Round in Interviews? Can you design Netflix in 45 minutes? What??? Are you serious ?? (I can watch it for the whole night but…). It’s impossible to explain even a single component of Netflix and you are asking me to design it within just 45 minutes of a short time?? Yes, this is what you are expected to do in your system design interviews if you want to get your dream job in big tech giant companies. You will have to give a clear explanation about designing these kinds of large scalable distributed systems (like Twitter, Messenger, Netflix, Uber, etc..) to the interviewer. This round may be a challenging and complex round for you because you are supposed to cover all the topics and tradeoffs within this limited time frame which seems to be impossible. We don’t want to make this round scary for you so we will discuss step by step how to clear this round and some useful tips to avoid common mistakes. Let’s try to make it simple and discuss some key points before you start your preparation for this round. Consider your interviewer as a team member and take this round as an opportunity to work with him where you both are supposed to solve a real-world problem related to your company’s goal but here you need to take the ownership and lead everything. The main purpose of this round is to understand how capable you are building a large scale system and your thought process behind designing a service. Clarity of thoughts matter a lot because if you can explain it to the interviewer, you can do this in your team as well. One of the good things for you in this round is that you are supposed to come up with the best solution for all kinds of open-ended problems instead of accurate solutions. Your ability to articulate your thought matters more than the final design you present to them. We hope that from the above points we have simplified a few things for you and make this round a little bit easier for you. Okay, I got it but where to start, where to end, tell me the best way to cover everything step by step within this strict timeframe. We know that it might be an overwhelming round for you so let’s start discussing step by step approach and try to make this round easier for you. 1. Understand the Goal and Gather All the Requirements You need to first understand your end goal before jumping to the solution so gather all the basic requirements from your interviewer. Ask relevant questions to clear your doubts. Design questions are basically open-ended conversation which doesn’t have one correct solution so it’s good to start with some basic assumptions. What’s the end goal of the system or service? Who are the end-users? How they will use the service? What features your interviewer wants you to include and what exclude? What should be the input and its output or final outcome? A product like Facebook, Twitter or Reddit is a well-known product so even if you know how to design such kind of system still it’s your responsibility to share your assumptions and discuss with the interviewer what features they care about and what they don’t. They may want you to include some features which don’t exist in this kind of systems or they may tell you to exclude some features. So make sure you have a better understanding of all the requirements and features. Consider the example of designing twitter. Some of the questions are who can post a tweet? who can read the tweet? who can follow the user? like, comments, pictures, active users, total users and discuss other features your interviewer wants you to include. 2. System Interface Definition and Establish Scope After the first step, you need to identify what kind of APIs your system needs to get the job done based on whatever features you have included. Also, discuss the scope and availability of the system, discuss some relevant questions like do you both care about only end-to-end experience or just the API?. Client support (mobile, web etc). Authentication, analytics, integration, performance, etc. Is the system going to work if the host is down or the entire data system is down? So discuss with the interviewer how much availability he/she care about the system. From both, the above two steps make sure you know the exact scope of the problem and the complexity of the system. 3. Scalability Estimation: You design a service that works for a hundred users, but is it going to work for a thousand users or million users? Is it going to scale and work fine as we add more users or more requests? Basically you need to consider the same feature for different scales and it’s very important to get the right scale because different answer requires a different design. Scalability also helps in load balancing, caching and partitioning so you can ask questions like: What’s the limit of the data or network or bandwidth we need to care about? How much storage do we need? What’s the average response time? 4. Start with High-level Components then move to Detailed Design Start to cover the end to end process based on your goal, so identify each component to solve the actual problem or to implement your complete system. How all the components come together to meet the actual requirement? Below are some quick points to guide you properly while explaining the components: Divide your complete system into 6-7 higher level or core components. Drill down further and discuss the role and responsibility of each component also how they are going to interact or communicate with each other. While explaining the components your interviewer may guide you towards 1-2 components and wants you to explain those components in depth. So there you need to further discuss that in detail. Discuss the frontend, backend, networking, caching, load balancing, queueing, database, external API calls, user interaction, offline processes, etc. Tell the interviewer what are the technologies or database you can use in your system. 5. Tradeoffs and Resolving Bottleneck Design interviews are open-ended conversations so there is no single answer and every decision will have a tradeoff when you will present your architecture and your thought process to the interviewer. The complex system always requires compromises so you need to tell them different approaches, their pros, and cons, and why would you choose one over another. Which database is fit in your system and why? Why would you choose a specific technology in different layers or components. Which frameworks can be good for your design and which one you need to choose? What are the different security options available to keep your data safe and which one you would choose? You also need to think and resolve the bottlenecks like what kind of failure can occur in your system and what’s the solution for that. Do you need to keep a backup or you will take the help of any other resources. Do you have any backup for your data in case your server crashes and you lose the entire data? How would you monitor the performance of the service? If any component fails then what’s the solution to run your system smoothly and properly? Basically you should have an organized and clear plan to deal with all these kinds of critical failures in your system. Quick Tips: Try to follow 80-20 rule during your interview, where 80% of the time you will be speaking and explaining everything and 20% of the time your interviewer. Don’t use buzzwords and pretend to be an expert if you don’t know something. You read some blog posts or few topics today and tomorrow is your interview, during your interview if you throw some buzzwords like “No-SQL”, “Mongo DB” and “Cassandra” then it may backfire you. You can’t make fool to the interviewer who is an industry expert, always consider that your interviewer may ask for more details and justification so if you are using technology X or database Y then “why?”, prepare yourself for this kind of questions. Do not go into detail prematurely. Many times it happens when a candidate starts explaining one part of the system, they go into too much detail of the component and forget about the strict timeframe and other components. Maybe the interviewer wants you to stop somewhere where they don’t need too much detail. So to avoid this mistake wait for the interviewer’s feedback or response. They will give you some hints or will direct you whatever part of the system they want you to explain further. Don’t have a set architecture in mind like MVC or event-driven and try to fit the requirement somehow in that architecture. Maybe it’s not suitable as per the requirement. Requirements may change during the interview to test your flexibility so try to avoid this mistake. Be honest during your interviews and if you have never used technology X then you don’t need to be fake in that situation. Try to find common solutions and show them your honesty, confidence, and willingness to learn something. That will make a good impression on interviewer. Your practical experience, your knowledge, understanding of modern software system and how you express yourself clearly during your interview matters a lot to design a system successfully. Important Links: System Design Course System Design Preparation Cheatsheet Top 10 System Design Interview Questions for Software Engineers System Design Cheatsheet My Personal Notes arrow_drop_up Save Recommended Posts: Automating File Movement on your system Top 5 Common Mistakes in Technical On-site Interviews Beginning BootStrap (Part-2) | Grid System Design data structures for a very large social network like Facebook or Linkedln Design a Keylogger in Python How to get started for technical Interviews? Difference between FAT32, exFAT, and NTFS File System Android System Architecture Layouts in Android UI Design 8 Ways to Shipwreck Your Next Website Design Characteristics of data in geographical information system (GIS) Editors and Its types in System Programming The Tempo Operating System Expected Properties of a Big Data System OOPs | Object Oriented Design anuupadhyay Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlog thumb_up 5 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How Big Data Artificial Intelligence is Changing the Face of Traditional Big Data? Next last_page Brain Machine Interface (BMI) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Convert Directed Graph into a Tree Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? Most Visited Articles I don't like Coding. What should I do to Get a Job in IT? How to Become a Data Analyst in 2019: A Complete Guide What is Competitive Programming and How to Prepare for It? How to Become a Data Scientist in 2019: A Complete Guide Minimum characters that are to be inserted such that no three consecutive characters are same ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/how-to-crack-system-design-round-in-interviews/?ref=leftbar-rightbar How to Crack System Design Round in Interviews? - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Geek Week – Celebrate The Biggest Programming Festival With GeeksforGeeks I don't like Coding. What should I do to Get a Job in IT? What is Competitive Programming and How to Prepare for It? 7 Common Programming Principles That Every Developer Must Follow SOLID Principle in Programming: Understand With Real Life Examples How to Prepare for Amazon Software Development Engineering Interview? How to Become a Data Scientist in 2019: A Complete Guide How to Become a Data Analyst in 2019: A Complete Guide Best Books to Learn Back-End Web Development 10 Famous Bugs in The Computer Science World How Does Google Use Machine Learning? How Does NASA Use Machine Learning? Top Machine Learning Trends in 2019 Which is better, the GRE or the GATE? How to Protect Yourself From Cyber Attacks? Computer science, an overrated dream Graphene Batteries 10 Tips to Protect Your Online Data Privacy in 2019 Microsoft Windows (10) Vs macOS (Mojave) Interesting Funny Commands in Linux If we delete cookies of a site, we can still logged in without logging again How to Setup Burp Suite for Bug Bounty or Web Application Penetration Testing? Neuralink - A Brain-Computer Interface Technology How to use Emojis in Windows 10? Evolution of Foldable Smartphones Impact of IoT on CyberSecurity How to Transparently Overlaid Two Directories Using UnionFS in Linux? Benefits of Automated Cross-Browser Testing for Online Business Comparing Python with C and C++ How to Crack System Design Round in Interviews? Can you design Netflix in 45 minutes? What??? Are you serious ?? (I can watch it for the whole night but…). It’s impossible to explain even a single component of Netflix and you are asking me to design it within just 45 minutes of a short time?? Yes, this is what you are expected to do in your system design interviews if you want to get your dream job in big tech giant companies. You will have to give a clear explanation about designing these kinds of large scalable distributed systems (like Twitter, Messenger, Netflix, Uber, etc..) to the interviewer. This round may be a challenging and complex round for you because you are supposed to cover all the topics and tradeoffs within this limited time frame which seems to be impossible. We don’t want to make this round scary for you so we will discuss step by step how to clear this round and some useful tips to avoid common mistakes. Let’s try to make it simple and discuss some key points before you start your preparation for this round. Consider your interviewer as a team member and take this round as an opportunity to work with him where you both are supposed to solve a real-world problem related to your company’s goal but here you need to take the ownership and lead everything. The main purpose of this round is to understand how capable you are building a large scale system and your thought process behind designing a service. Clarity of thoughts matter a lot because if you can explain it to the interviewer, you can do this in your team as well. One of the good things for you in this round is that you are supposed to come up with the best solution for all kinds of open-ended problems instead of accurate solutions. Your ability to articulate your thought matters more than the final design you present to them. We hope that from the above points we have simplified a few things for you and make this round a little bit easier for you. Okay, I got it but where to start, where to end, tell me the best way to cover everything step by step within this strict timeframe. We know that it might be an overwhelming round for you so let’s start discussing step by step approach and try to make this round easier for you. 1. Understand the Goal and Gather All the Requirements You need to first understand your end goal before jumping to the solution so gather all the basic requirements from your interviewer. Ask relevant questions to clear your doubts. Design questions are basically open-ended conversation which doesn’t have one correct solution so it’s good to start with some basic assumptions. What’s the end goal of the system or service? Who are the end-users? How they will use the service? What features your interviewer wants you to include and what exclude? What should be the input and its output or final outcome? A product like Facebook, Twitter or Reddit is a well-known product so even if you know how to design such kind of system still it’s your responsibility to share your assumptions and discuss with the interviewer what features they care about and what they don’t. They may want you to include some features which don’t exist in this kind of systems or they may tell you to exclude some features. So make sure you have a better understanding of all the requirements and features. Consider the example of designing twitter. Some of the questions are who can post a tweet? who can read the tweet? who can follow the user? like, comments, pictures, active users, total users and discuss other features your interviewer wants you to include. 2. System Interface Definition and Establish Scope After the first step, you need to identify what kind of APIs your system needs to get the job done based on whatever features you have included. Also, discuss the scope and availability of the system, discuss some relevant questions like do you both care about only end-to-end experience or just the API?. Client support (mobile, web etc). Authentication, analytics, integration, performance, etc. Is the system going to work if the host is down or the entire data system is down? So discuss with the interviewer how much availability he/she care about the system. From both, the above two steps make sure you know the exact scope of the problem and the complexity of the system. 3. Scalability Estimation: You design a service that works for a hundred users, but is it going to work for a thousand users or million users? Is it going to scale and work fine as we add more users or more requests? Basically you need to consider the same feature for different scales and it’s very important to get the right scale because different answer requires a different design. Scalability also helps in load balancing, caching and partitioning so you can ask questions like: What’s the limit of the data or network or bandwidth we need to care about? How much storage do we need? What’s the average response time? 4. Start with High-level Components then move to Detailed Design Start to cover the end to end process based on your goal, so identify each component to solve the actual problem or to implement your complete system. How all the components come together to meet the actual requirement? Below are some quick points to guide you properly while explaining the components: Divide your complete system into 6-7 higher level or core components. Drill down further and discuss the role and responsibility of each component also how they are going to interact or communicate with each other. While explaining the components your interviewer may guide you towards 1-2 components and wants you to explain those components in depth. So there you need to further discuss that in detail. Discuss the frontend, backend, networking, caching, load balancing, queueing, database, external API calls, user interaction, offline processes, etc. Tell the interviewer what are the technologies or database you can use in your system. 5. Tradeoffs and Resolving Bottleneck Design interviews are open-ended conversations so there is no single answer and every decision will have a tradeoff when you will present your architecture and your thought process to the interviewer. The complex system always requires compromises so you need to tell them different approaches, their pros, and cons, and why would you choose one over another. Which database is fit in your system and why? Why would you choose a specific technology in different layers or components. Which frameworks can be good for your design and which one you need to choose? What are the different security options available to keep your data safe and which one you would choose? You also need to think and resolve the bottlenecks like what kind of failure can occur in your system and what’s the solution for that. Do you need to keep a backup or you will take the help of any other resources. Do you have any backup for your data in case your server crashes and you lose the entire data? How would you monitor the performance of the service? If any component fails then what’s the solution to run your system smoothly and properly? Basically you should have an organized and clear plan to deal with all these kinds of critical failures in your system. Quick Tips: Try to follow 80-20 rule during your interview, where 80% of the time you will be speaking and explaining everything and 20% of the time your interviewer. Don’t use buzzwords and pretend to be an expert if you don’t know something. You read some blog posts or few topics today and tomorrow is your interview, during your interview if you throw some buzzwords like “No-SQL”, “Mongo DB” and “Cassandra” then it may backfire you. You can’t make fool to the interviewer who is an industry expert, always consider that your interviewer may ask for more details and justification so if you are using technology X or database Y then “why?”, prepare yourself for this kind of questions. Do not go into detail prematurely. Many times it happens when a candidate starts explaining one part of the system, they go into too much detail of the component and forget about the strict timeframe and other components. Maybe the interviewer wants you to stop somewhere where they don’t need too much detail. So to avoid this mistake wait for the interviewer’s feedback or response. They will give you some hints or will direct you whatever part of the system they want you to explain further. Don’t have a set architecture in mind like MVC or event-driven and try to fit the requirement somehow in that architecture. Maybe it’s not suitable as per the requirement. Requirements may change during the interview to test your flexibility so try to avoid this mistake. Be honest during your interviews and if you have never used technology X then you don’t need to be fake in that situation. Try to find common solutions and show them your honesty, confidence, and willingness to learn something. That will make a good impression on interviewer. Your practical experience, your knowledge, understanding of modern software system and how you express yourself clearly during your interview matters a lot to design a system successfully. Important Links: System Design Course System Design Preparation Cheatsheet Top 10 System Design Interview Questions for Software Engineers System Design Cheatsheet My Personal Notes arrow_drop_up Save Recommended Posts: Automating File Movement on your system Top 5 Common Mistakes in Technical On-site Interviews Beginning BootStrap (Part-2) | Grid System Design data structures for a very large social network like Facebook or Linkedln Design a Keylogger in Python How to get started for technical Interviews? Difference between FAT32, exFAT, and NTFS File System Android System Architecture Layouts in Android UI Design 8 Ways to Shipwreck Your Next Website Design Characteristics of data in geographical information system (GIS) Editors and Its types in System Programming The Tempo Operating System Expected Properties of a Big Data System OOPs | Object Oriented Design anuupadhyay Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlog thumb_up 5 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How Big Data Artificial Intelligence is Changing the Face of Traditional Big Data? Next last_page Brain Machine Interface (BMI) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Convert Directed Graph into a Tree Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? Most Visited Articles I don't like Coding. What should I do to Get a Job in IT? How to Become a Data Analyst in 2019: A Complete Guide What is Competitive Programming and How to Prepare for It? How to Become a Data Scientist in 2019: A Complete Guide Minimum characters that are to be inserted such that no three consecutive characters are same ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/how-to-crack-system-design-round-in-interviews/?ref=leftbar-rightbar How to Crack System Design Round in Interviews? - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Geek Week – Celebrate The Biggest Programming Festival With GeeksforGeeks I don't like Coding. What should I do to Get a Job in IT? What is Competitive Programming and How to Prepare for It? 7 Common Programming Principles That Every Developer Must Follow SOLID Principle in Programming: Understand With Real Life Examples How to Prepare for Amazon Software Development Engineering Interview? How to Become a Data Scientist in 2019: A Complete Guide How to Become a Data Analyst in 2019: A Complete Guide Best Books to Learn Back-End Web Development 10 Famous Bugs in The Computer Science World How Does Google Use Machine Learning? How Does NASA Use Machine Learning? Top Machine Learning Trends in 2019 Which is better, the GRE or the GATE? How to Protect Yourself From Cyber Attacks? Computer science, an overrated dream Graphene Batteries 10 Tips to Protect Your Online Data Privacy in 2019 Microsoft Windows (10) Vs macOS (Mojave) Interesting Funny Commands in Linux If we delete cookies of a site, we can still logged in without logging again How to Setup Burp Suite for Bug Bounty or Web Application Penetration Testing? Neuralink - A Brain-Computer Interface Technology How to use Emojis in Windows 10? Evolution of Foldable Smartphones Impact of IoT on CyberSecurity How to Transparently Overlaid Two Directories Using UnionFS in Linux? Benefits of Automated Cross-Browser Testing for Online Business Comparing Python with C and C++ How to Crack System Design Round in Interviews? Can you design Netflix in 45 minutes? What??? Are you serious ?? (I can watch it for the whole night but…). It’s impossible to explain even a single component of Netflix and you are asking me to design it within just 45 minutes of a short time?? Yes, this is what you are expected to do in your system design interviews if you want to get your dream job in big tech giant companies. You will have to give a clear explanation about designing these kinds of large scalable distributed systems (like Twitter, Messenger, Netflix, Uber, etc..) to the interviewer. This round may be a challenging and complex round for you because you are supposed to cover all the topics and tradeoffs within this limited time frame which seems to be impossible. We don’t want to make this round scary for you so we will discuss step by step how to clear this round and some useful tips to avoid common mistakes. Let’s try to make it simple and discuss some key points before you start your preparation for this round. Consider your interviewer as a team member and take this round as an opportunity to work with him where you both are supposed to solve a real-world problem related to your company’s goal but here you need to take the ownership and lead everything. The main purpose of this round is to understand how capable you are building a large scale system and your thought process behind designing a service. Clarity of thoughts matter a lot because if you can explain it to the interviewer, you can do this in your team as well. One of the good things for you in this round is that you are supposed to come up with the best solution for all kinds of open-ended problems instead of accurate solutions. Your ability to articulate your thought matters more than the final design you present to them. We hope that from the above points we have simplified a few things for you and make this round a little bit easier for you. Okay, I got it but where to start, where to end, tell me the best way to cover everything step by step within this strict timeframe. We know that it might be an overwhelming round for you so let’s start discussing step by step approach and try to make this round easier for you. 1. Understand the Goal and Gather All the Requirements You need to first understand your end goal before jumping to the solution so gather all the basic requirements from your interviewer. Ask relevant questions to clear your doubts. Design questions are basically open-ended conversation which doesn’t have one correct solution so it’s good to start with some basic assumptions. What’s the end goal of the system or service? Who are the end-users? How they will use the service? What features your interviewer wants you to include and what exclude? What should be the input and its output or final outcome? A product like Facebook, Twitter or Reddit is a well-known product so even if you know how to design such kind of system still it’s your responsibility to share your assumptions and discuss with the interviewer what features they care about and what they don’t. They may want you to include some features which don’t exist in this kind of systems or they may tell you to exclude some features. So make sure you have a better understanding of all the requirements and features. Consider the example of designing twitter. Some of the questions are who can post a tweet? who can read the tweet? who can follow the user? like, comments, pictures, active users, total users and discuss other features your interviewer wants you to include. 2. System Interface Definition and Establish Scope After the first step, you need to identify what kind of APIs your system needs to get the job done based on whatever features you have included. Also, discuss the scope and availability of the system, discuss some relevant questions like do you both care about only end-to-end experience or just the API?. Client support (mobile, web etc). Authentication, analytics, integration, performance, etc. Is the system going to work if the host is down or the entire data system is down? So discuss with the interviewer how much availability he/she care about the system. From both, the above two steps make sure you know the exact scope of the problem and the complexity of the system. 3. Scalability Estimation: You design a service that works for a hundred users, but is it going to work for a thousand users or million users? Is it going to scale and work fine as we add more users or more requests? Basically you need to consider the same feature for different scales and it’s very important to get the right scale because different answer requires a different design. Scalability also helps in load balancing, caching and partitioning so you can ask questions like: What’s the limit of the data or network or bandwidth we need to care about? How much storage do we need? What’s the average response time? 4. Start with High-level Components then move to Detailed Design Start to cover the end to end process based on your goal, so identify each component to solve the actual problem or to implement your complete system. How all the components come together to meet the actual requirement? Below are some quick points to guide you properly while explaining the components: Divide your complete system into 6-7 higher level or core components. Drill down further and discuss the role and responsibility of each component also how they are going to interact or communicate with each other. While explaining the components your interviewer may guide you towards 1-2 components and wants you to explain those components in depth. So there you need to further discuss that in detail. Discuss the frontend, backend, networking, caching, load balancing, queueing, database, external API calls, user interaction, offline processes, etc. Tell the interviewer what are the technologies or database you can use in your system. 5. Tradeoffs and Resolving Bottleneck Design interviews are open-ended conversations so there is no single answer and every decision will have a tradeoff when you will present your architecture and your thought process to the interviewer. The complex system always requires compromises so you need to tell them different approaches, their pros, and cons, and why would you choose one over another. Which database is fit in your system and why? Why would you choose a specific technology in different layers or components. Which frameworks can be good for your design and which one you need to choose? What are the different security options available to keep your data safe and which one you would choose? You also need to think and resolve the bottlenecks like what kind of failure can occur in your system and what’s the solution for that. Do you need to keep a backup or you will take the help of any other resources. Do you have any backup for your data in case your server crashes and you lose the entire data? How would you monitor the performance of the service? If any component fails then what’s the solution to run your system smoothly and properly? Basically you should have an organized and clear plan to deal with all these kinds of critical failures in your system. Quick Tips: Try to follow 80-20 rule during your interview, where 80% of the time you will be speaking and explaining everything and 20% of the time your interviewer. Don’t use buzzwords and pretend to be an expert if you don’t know something. You read some blog posts or few topics today and tomorrow is your interview, during your interview if you throw some buzzwords like “No-SQL”, “Mongo DB” and “Cassandra” then it may backfire you. You can’t make fool to the interviewer who is an industry expert, always consider that your interviewer may ask for more details and justification so if you are using technology X or database Y then “why?”, prepare yourself for this kind of questions. Do not go into detail prematurely. Many times it happens when a candidate starts explaining one part of the system, they go into too much detail of the component and forget about the strict timeframe and other components. Maybe the interviewer wants you to stop somewhere where they don’t need too much detail. So to avoid this mistake wait for the interviewer’s feedback or response. They will give you some hints or will direct you whatever part of the system they want you to explain further. Don’t have a set architecture in mind like MVC or event-driven and try to fit the requirement somehow in that architecture. Maybe it’s not suitable as per the requirement. Requirements may change during the interview to test your flexibility so try to avoid this mistake. Be honest during your interviews and if you have never used technology X then you don’t need to be fake in that situation. Try to find common solutions and show them your honesty, confidence, and willingness to learn something. That will make a good impression on interviewer. Your practical experience, your knowledge, understanding of modern software system and how you express yourself clearly during your interview matters a lot to design a system successfully. Important Links: System Design Course System Design Preparation Cheatsheet Top 10 System Design Interview Questions for Software Engineers System Design Cheatsheet My Personal Notes arrow_drop_up Save Recommended Posts: Automating File Movement on your system Top 5 Common Mistakes in Technical On-site Interviews Beginning BootStrap (Part-2) | Grid System Design data structures for a very large social network like Facebook or Linkedln Design a Keylogger in Python How to get started for technical Interviews? Difference between FAT32, exFAT, and NTFS File System Android System Architecture Layouts in Android UI Design 8 Ways to Shipwreck Your Next Website Design Characteristics of data in geographical information system (GIS) Editors and Its types in System Programming The Tempo Operating System Expected Properties of a Big Data System OOPs | Object Oriented Design anuupadhyay Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlog thumb_up 5 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How Big Data Artificial Intelligence is Changing the Face of Traditional Big Data? Next last_page Brain Machine Interface (BMI) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Convert Directed Graph into a Tree Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? Most Visited Articles I don't like Coding. What should I do to Get a Job in IT? How to Become a Data Analyst in 2019: A Complete Guide What is Competitive Programming and How to Prepare for It? How to Become a Data Scientist in 2019: A Complete Guide Minimum characters that are to be inserted such that no three consecutive characters are same ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reserved