https://www.geeksforgeeks.org/maximum-product-of-bitonic-subsequence-of-size-3/ Maximum product of bitonic subsequence of size 3 - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Find a pair (n,r) in an integer array such that value of nPr is maximum Minimum increment or decrement operations required to make the array sorted Longest Increasing Subsequence using Longest Common Subsequence Algorithm Minimize the cost of partitioning an array into K groups Find a pair (n,r) in an integer array such that value of nCr is maximum Maximize the Expression | Bit Manipulation Minimum number of additons to make the string balanced Blowfish Algorithm with Examples Count number of Special Set Sentinel Linear Search Check whether two strings can be made equal by copying their characters with the adjacent ones Queries to find the left-most given type integer in a binary array Maximum product of bitonic subsequence of size 3 Given an array arr[] of positive integers of size N, the task is to find the maximum product of bitonic subsequence of size 3. Bitonic Subsequence: subsequence in which elements are first in the increasing order and then decreasing order. Elements in the subsequence are follow this order arr[i] < arr[j] > arr[k] for i < j < k where i, j, k are the index of the given array. Note: If no such element is found then print -1. Examples: Input: arr[] = {1, 8, 3, 7, 5, 6, 7} Output: 126 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 8, 5}, {1, 8, 6}, {1, 7, 6}, {3, 7, 6}, {1, 7, 5}, {3, 7, 5}. Hence the maximum product of bitonic subsequence is 3*7*6 = 126 Input: arr[] = {1, 8, 3, 7} Output: 56 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 7, 3}. Hence the maximum product of bitonic subsequence is 1*8*7 = 56 Recommended: Please try your approach on {IDE} first, before moving on to the solution. Naive Approach:A simple solution is to find the product of all the bitonic subsequences of size 3 and take the maximum among them. Algorithm: Intialize ans to -1, such that if there is no such subsequence then the output will be -1. Iterate over the Array with three nested loops with loop variables as i, j and k for choosing three elements of the array. Check if arr[j] > arr[i] and arr[j] > arr[k] then update the ans with the maximum value between ans and arr[i] * arr[j] * arr[k]. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Intialize ans to -1 if no such // subsequence exist in the array int ans = -1; // Nested loops to choose the three // elements of the array for (int i = 0; i < n - 2; i++) { for (int j = i + 1; j < n - 1; j++) { for (int k = j + 1; k < n; k++) { // Condition to check if // they form a bitonic subsequence if (arr[i] < arr[j] && arr[j] > arr[k]) ans = max( ans, arr[i] * arr[j] * arr[k] ); } } } return ans; } // Driver Code int main() { int arr[] = { 1, 8, 3, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function call cout << maxProduct(arr, n) << endl; } chevron_right filter_none Output: 
56
 Performance Analysis: Time Complexity: As in the above approach, there are three nested loop to find the maximum product of the bitonic subsequence of size 3, hence the Time Complexity will be O(N3). Auxiliary Space: As in the above approach, there is no extra space used, hence the auxiliary space will be O(1). Efficient approach: The idea is to find the largest value on the left side and right side of each index which are smaller than the element present at the current index, to do this use a Self Balancing BST and then for every element find the maximum product that can be formed and take the maximum out of those products. Self Balancing BST is implemented as set in C++ and TreeSet in Java. Algorithm: Declare a self balancing BST (say s). Declare two new arrays left[] and right[] to store the lower bound for arr[i] in left of that element in left[i] and lower bound of arr[i] in right of that element in right[i]. Run a loop from 0 to length – 1 to find the lower bound of arr[i] in left of that element and store it in the left[i]. Run a loop from length -1 to 0 to find the lower bound of arr[i] in right of that element and store it in the right[i]. Run a loop from 0 to length – 1 to find the bitnonic subsequence that can be formed using that element to get the maximum product using the left[] and right[] array. That is for every element maximum product bitonic subsequence that can be formed is left[i] * right[i] * arr[i]. Below is the implementation of the above approach: filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Self Balancing BST set<int> s; set<int>::iterator it; // Left array to store the // maximum smallest value for // every element in left of it int Left[n]; // Right array to store the // maximum smallest value for // every element in right of it int Right[n]; // Loop to find the maximum // smallest element in left of // every element in array for (int i = 0; i < n; i++) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is a maximum smallest element if (it != s.begin()) { it--; Left[i] = *it; } else { Left[i] = -1; } } // Clear Set s.clear(); // Loop to find the maximum // smallest element in right of // every element in array for (int i = n - 1; i >= 0; i--) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is such element exists if (it != s.begin()) { it--; Right[i] = *it; } // If no such element exists. else { Right[i] = -1; } } int ans = -1; // Loop to find the maximum product // bitonic subsequence of size 3 for (int i = 0; i < n; i++) { if (Left[i] > 0 and Right[i] > 0) ans = max(ans, arr[i] * Left[i] * Right[i]); } if (ans < 0) { return -1; } else { return ans; } } // Driver Code int main() { int arr[] = { 1, 8, 3, 7, 5, 6, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function Call cout << maxProduct(arr, n); } chevron_right filter_none Output: 
126
 Performance Analysis: Time Complexity: O(NlogN). Auxiliary Space: O(N). My Personal Notes arrow_drop_up Save Recommended Posts: Maximum product of subsequence of size k Maximum product of an increasing subsequence of size 3 Subsequence of size k with maximum possible GCD Maximum product of an increasing subsequence Find the Increasing subsequence of length three with maximum product Minimal product subsequence where adjacent elements are separated by a maximum distance of K Maximum product quadruple (sub-sequence of size 4) in array Product of all Subsequences of size K except the minimum and maximum Elements Maximum product of a triplet (subsequnece of size 3) in array Longest Bitonic Subsequence in O(n log n) Longest Bitonic Subsequence | DP-15 Printing Longest Bitonic Subsequence Length of longest strict bitonic subsequence Maximum sum bitonic subarray Maximum length subsequence such that adjacent elements in the subsequence have a common factor rrlinus Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Algorithms Arrays Binary Search Tree Competitive Programming subsequence Practice Tags : Arrays Binary Search Tree Algorithms thumb_up 1 To-do Done 2 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Minimum change in given value so that it lies in all given Ranges Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? What is Competitive Programming and How to Prepare for It? Most visited in Arrays Minimum halls required for class scheduling Number of K length subsequences with minimum sum Probability that a random pair chosen from an array (a[i], a[j]) has the maximum sum Find the deleted value from the array when average of original elements is given Sort the numbers according to their product of digits ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/maximum-product-of-bitonic-subsequence-of-size-3/ Maximum product of bitonic subsequence of size 3 - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Find a pair (n,r) in an integer array such that value of nPr is maximum Minimum increment or decrement operations required to make the array sorted Longest Increasing Subsequence using Longest Common Subsequence Algorithm Minimize the cost of partitioning an array into K groups Find a pair (n,r) in an integer array such that value of nCr is maximum Maximize the Expression | Bit Manipulation Minimum number of additons to make the string balanced Blowfish Algorithm with Examples Count number of Special Set Sentinel Linear Search Check whether two strings can be made equal by copying their characters with the adjacent ones Queries to find the left-most given type integer in a binary array Maximum product of bitonic subsequence of size 3 Given an array arr[] of positive integers of size N, the task is to find the maximum product of bitonic subsequence of size 3. Bitonic Subsequence: subsequence in which elements are first in the increasing order and then decreasing order. Elements in the subsequence are follow this order arr[i] < arr[j] > arr[k] for i < j < k where i, j, k are the index of the given array. Note: If no such element is found then print -1. Examples: Input: arr[] = {1, 8, 3, 7, 5, 6, 7} Output: 126 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 8, 5}, {1, 8, 6}, {1, 7, 6}, {3, 7, 6}, {1, 7, 5}, {3, 7, 5}. Hence the maximum product of bitonic subsequence is 3*7*6 = 126 Input: arr[] = {1, 8, 3, 7} Output: 56 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 7, 3}. Hence the maximum product of bitonic subsequence is 1*8*7 = 56 Recommended: Please try your approach on {IDE} first, before moving on to the solution. Naive Approach:A simple solution is to find the product of all the bitonic subsequences of size 3 and take the maximum among them. Algorithm: Intialize ans to -1, such that if there is no such subsequence then the output will be -1. Iterate over the Array with three nested loops with loop variables as i, j and k for choosing three elements of the array. Check if arr[j] > arr[i] and arr[j] > arr[k] then update the ans with the maximum value between ans and arr[i] * arr[j] * arr[k]. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Intialize ans to -1 if no such // subsequence exist in the array int ans = -1; // Nested loops to choose the three // elements of the array for (int i = 0; i < n - 2; i++) { for (int j = i + 1; j < n - 1; j++) { for (int k = j + 1; k < n; k++) { // Condition to check if // they form a bitonic subsequence if (arr[i] < arr[j] && arr[j] > arr[k]) ans = max( ans, arr[i] * arr[j] * arr[k] ); } } } return ans; } // Driver Code int main() { int arr[] = { 1, 8, 3, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function call cout << maxProduct(arr, n) << endl; } chevron_right filter_none Output: 
56
 Performance Analysis: Time Complexity: As in the above approach, there are three nested loop to find the maximum product of the bitonic subsequence of size 3, hence the Time Complexity will be O(N3). Auxiliary Space: As in the above approach, there is no extra space used, hence the auxiliary space will be O(1). Efficient approach: The idea is to find the largest value on the left side and right side of each index which are smaller than the element present at the current index, to do this use a Self Balancing BST and then for every element find the maximum product that can be formed and take the maximum out of those products. Self Balancing BST is implemented as set in C++ and TreeSet in Java. Algorithm: Declare a self balancing BST (say s). Declare two new arrays left[] and right[] to store the lower bound for arr[i] in left of that element in left[i] and lower bound of arr[i] in right of that element in right[i]. Run a loop from 0 to length – 1 to find the lower bound of arr[i] in left of that element and store it in the left[i]. Run a loop from length -1 to 0 to find the lower bound of arr[i] in right of that element and store it in the right[i]. Run a loop from 0 to length – 1 to find the bitnonic subsequence that can be formed using that element to get the maximum product using the left[] and right[] array. That is for every element maximum product bitonic subsequence that can be formed is left[i] * right[i] * arr[i]. Below is the implementation of the above approach: filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Self Balancing BST set<int> s; set<int>::iterator it; // Left array to store the // maximum smallest value for // every element in left of it int Left[n]; // Right array to store the // maximum smallest value for // every element in right of it int Right[n]; // Loop to find the maximum // smallest element in left of // every element in array for (int i = 0; i < n; i++) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is a maximum smallest element if (it != s.begin()) { it--; Left[i] = *it; } else { Left[i] = -1; } } // Clear Set s.clear(); // Loop to find the maximum // smallest element in right of // every element in array for (int i = n - 1; i >= 0; i--) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is such element exists if (it != s.begin()) { it--; Right[i] = *it; } // If no such element exists. else { Right[i] = -1; } } int ans = -1; // Loop to find the maximum product // bitonic subsequence of size 3 for (int i = 0; i < n; i++) { if (Left[i] > 0 and Right[i] > 0) ans = max(ans, arr[i] * Left[i] * Right[i]); } if (ans < 0) { return -1; } else { return ans; } } // Driver Code int main() { int arr[] = { 1, 8, 3, 7, 5, 6, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function Call cout << maxProduct(arr, n); } chevron_right filter_none Output: 
126
 Performance Analysis: Time Complexity: O(NlogN). Auxiliary Space: O(N). My Personal Notes arrow_drop_up Save Recommended Posts: Maximum product of subsequence of size k Maximum product of an increasing subsequence of size 3 Subsequence of size k with maximum possible GCD Maximum product of an increasing subsequence Find the Increasing subsequence of length three with maximum product Minimal product subsequence where adjacent elements are separated by a maximum distance of K Maximum product quadruple (sub-sequence of size 4) in array Product of all Subsequences of size K except the minimum and maximum Elements Maximum product of a triplet (subsequnece of size 3) in array Longest Bitonic Subsequence in O(n log n) Longest Bitonic Subsequence | DP-15 Printing Longest Bitonic Subsequence Length of longest strict bitonic subsequence Maximum sum bitonic subarray Maximum length subsequence such that adjacent elements in the subsequence have a common factor rrlinus Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Algorithms Arrays Binary Search Tree Competitive Programming subsequence Practice Tags : Arrays Binary Search Tree Algorithms thumb_up 1 To-do Done 2 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Minimum change in given value so that it lies in all given Ranges Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? What is Competitive Programming and How to Prepare for It? Most visited in Arrays Minimum halls required for class scheduling Number of K length subsequences with minimum sum Probability that a random pair chosen from an array (a[i], a[j]) has the maximum sum Find the deleted value from the array when average of original elements is given Sort the numbers according to their product of digits ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/maximum-product-of-bitonic-subsequence-of-size-3/ Maximum product of bitonic subsequence of size 3 - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Find a pair (n,r) in an integer array such that value of nPr is maximum Minimum increment or decrement operations required to make the array sorted Longest Increasing Subsequence using Longest Common Subsequence Algorithm Minimize the cost of partitioning an array into K groups Find a pair (n,r) in an integer array such that value of nCr is maximum Maximize the Expression | Bit Manipulation Minimum number of additons to make the string balanced Blowfish Algorithm with Examples Count number of Special Set Sentinel Linear Search Check whether two strings can be made equal by copying their characters with the adjacent ones Queries to find the left-most given type integer in a binary array Maximum product of bitonic subsequence of size 3 Given an array arr[] of positive integers of size N, the task is to find the maximum product of bitonic subsequence of size 3. Bitonic Subsequence: subsequence in which elements are first in the increasing order and then decreasing order. Elements in the subsequence are follow this order arr[i] < arr[j] > arr[k] for i < j < k where i, j, k are the index of the given array. Note: If no such element is found then print -1. Examples: Input: arr[] = {1, 8, 3, 7, 5, 6, 7} Output: 126 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 8, 5}, {1, 8, 6}, {1, 7, 6}, {3, 7, 6}, {1, 7, 5}, {3, 7, 5}. Hence the maximum product of bitonic subsequence is 3*7*6 = 126 Input: arr[] = {1, 8, 3, 7} Output: 56 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 7, 3}. Hence the maximum product of bitonic subsequence is 1*8*7 = 56 Recommended: Please try your approach on {IDE} first, before moving on to the solution. Naive Approach:A simple solution is to find the product of all the bitonic subsequences of size 3 and take the maximum among them. Algorithm: Intialize ans to -1, such that if there is no such subsequence then the output will be -1. Iterate over the Array with three nested loops with loop variables as i, j and k for choosing three elements of the array. Check if arr[j] > arr[i] and arr[j] > arr[k] then update the ans with the maximum value between ans and arr[i] * arr[j] * arr[k]. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Intialize ans to -1 if no such // subsequence exist in the array int ans = -1; // Nested loops to choose the three // elements of the array for (int i = 0; i < n - 2; i++) { for (int j = i + 1; j < n - 1; j++) { for (int k = j + 1; k < n; k++) { // Condition to check if // they form a bitonic subsequence if (arr[i] < arr[j] && arr[j] > arr[k]) ans = max( ans, arr[i] * arr[j] * arr[k] ); } } } return ans; } // Driver Code int main() { int arr[] = { 1, 8, 3, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function call cout << maxProduct(arr, n) << endl; } chevron_right filter_none Output: 
56
 Performance Analysis: Time Complexity: As in the above approach, there are three nested loop to find the maximum product of the bitonic subsequence of size 3, hence the Time Complexity will be O(N3). Auxiliary Space: As in the above approach, there is no extra space used, hence the auxiliary space will be O(1). Efficient approach: The idea is to find the largest value on the left side and right side of each index which are smaller than the element present at the current index, to do this use a Self Balancing BST and then for every element find the maximum product that can be formed and take the maximum out of those products. Self Balancing BST is implemented as set in C++ and TreeSet in Java. Algorithm: Declare a self balancing BST (say s). Declare two new arrays left[] and right[] to store the lower bound for arr[i] in left of that element in left[i] and lower bound of arr[i] in right of that element in right[i]. Run a loop from 0 to length – 1 to find the lower bound of arr[i] in left of that element and store it in the left[i]. Run a loop from length -1 to 0 to find the lower bound of arr[i] in right of that element and store it in the right[i]. Run a loop from 0 to length – 1 to find the bitnonic subsequence that can be formed using that element to get the maximum product using the left[] and right[] array. That is for every element maximum product bitonic subsequence that can be formed is left[i] * right[i] * arr[i]. Below is the implementation of the above approach: filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Self Balancing BST set<int> s; set<int>::iterator it; // Left array to store the // maximum smallest value for // every element in left of it int Left[n]; // Right array to store the // maximum smallest value for // every element in right of it int Right[n]; // Loop to find the maximum // smallest element in left of // every element in array for (int i = 0; i < n; i++) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is a maximum smallest element if (it != s.begin()) { it--; Left[i] = *it; } else { Left[i] = -1; } } // Clear Set s.clear(); // Loop to find the maximum // smallest element in right of // every element in array for (int i = n - 1; i >= 0; i--) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is such element exists if (it != s.begin()) { it--; Right[i] = *it; } // If no such element exists. else { Right[i] = -1; } } int ans = -1; // Loop to find the maximum product // bitonic subsequence of size 3 for (int i = 0; i < n; i++) { if (Left[i] > 0 and Right[i] > 0) ans = max(ans, arr[i] * Left[i] * Right[i]); } if (ans < 0) { return -1; } else { return ans; } } // Driver Code int main() { int arr[] = { 1, 8, 3, 7, 5, 6, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function Call cout << maxProduct(arr, n); } chevron_right filter_none Output: 
126
 Performance Analysis: Time Complexity: O(NlogN). Auxiliary Space: O(N). My Personal Notes arrow_drop_up Save Recommended Posts: Maximum product of subsequence of size k Maximum product of an increasing subsequence of size 3 Subsequence of size k with maximum possible GCD Maximum product of an increasing subsequence Find the Increasing subsequence of length three with maximum product Minimal product subsequence where adjacent elements are separated by a maximum distance of K Maximum product quadruple (sub-sequence of size 4) in array Product of all Subsequences of size K except the minimum and maximum Elements Maximum product of a triplet (subsequnece of size 3) in array Longest Bitonic Subsequence in O(n log n) Longest Bitonic Subsequence | DP-15 Printing Longest Bitonic Subsequence Length of longest strict bitonic subsequence Maximum sum bitonic subarray Maximum length subsequence such that adjacent elements in the subsequence have a common factor rrlinus Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Algorithms Arrays Binary Search Tree Competitive Programming subsequence Practice Tags : Arrays Binary Search Tree Algorithms thumb_up 1 To-do Done 2 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Minimum change in given value so that it lies in all given Ranges Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? What is Competitive Programming and How to Prepare for It? Most visited in Arrays Minimum halls required for class scheduling Number of K length subsequences with minimum sum Probability that a random pair chosen from an array (a[i], a[j]) has the maximum sum Find the deleted value from the array when average of original elements is given Sort the numbers according to their product of digits ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/maximum-product-of-bitonic-subsequence-of-size-3/ Maximum product of bitonic subsequence of size 3 - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Find a pair (n,r) in an integer array such that value of nPr is maximum Minimum increment or decrement operations required to make the array sorted Longest Increasing Subsequence using Longest Common Subsequence Algorithm Minimize the cost of partitioning an array into K groups Find a pair (n,r) in an integer array such that value of nCr is maximum Maximize the Expression | Bit Manipulation Minimum number of additons to make the string balanced Blowfish Algorithm with Examples Count number of Special Set Sentinel Linear Search Check whether two strings can be made equal by copying their characters with the adjacent ones Queries to find the left-most given type integer in a binary array Maximum product of bitonic subsequence of size 3 Given an array arr[] of positive integers of size N, the task is to find the maximum product of bitonic subsequence of size 3. Bitonic Subsequence: subsequence in which elements are first in the increasing order and then decreasing order. Elements in the subsequence are follow this order arr[i] < arr[j] > arr[k] for i < j < k where i, j, k are the index of the given array. Note: If no such element is found then print -1. Examples: Input: arr[] = {1, 8, 3, 7, 5, 6, 7} Output: 126 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 8, 5}, {1, 8, 6}, {1, 7, 6}, {3, 7, 6}, {1, 7, 5}, {3, 7, 5}. Hence the maximum product of bitonic subsequence is 3*7*6 = 126 Input: arr[] = {1, 8, 3, 7} Output: 56 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 7, 3}. Hence the maximum product of bitonic subsequence is 1*8*7 = 56 Recommended: Please try your approach on {IDE} first, before moving on to the solution. Naive Approach:A simple solution is to find the product of all the bitonic subsequences of size 3 and take the maximum among them. Algorithm: Intialize ans to -1, such that if there is no such subsequence then the output will be -1. Iterate over the Array with three nested loops with loop variables as i, j and k for choosing three elements of the array. Check if arr[j] > arr[i] and arr[j] > arr[k] then update the ans with the maximum value between ans and arr[i] * arr[j] * arr[k]. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Intialize ans to -1 if no such // subsequence exist in the array int ans = -1; // Nested loops to choose the three // elements of the array for (int i = 0; i < n - 2; i++) { for (int j = i + 1; j < n - 1; j++) { for (int k = j + 1; k < n; k++) { // Condition to check if // they form a bitonic subsequence if (arr[i] < arr[j] && arr[j] > arr[k]) ans = max( ans, arr[i] * arr[j] * arr[k] ); } } } return ans; } // Driver Code int main() { int arr[] = { 1, 8, 3, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function call cout << maxProduct(arr, n) << endl; } chevron_right filter_none Output: 
56
 Performance Analysis: Time Complexity: As in the above approach, there are three nested loop to find the maximum product of the bitonic subsequence of size 3, hence the Time Complexity will be O(N3). Auxiliary Space: As in the above approach, there is no extra space used, hence the auxiliary space will be O(1). Efficient approach: The idea is to find the largest value on the left side and right side of each index which are smaller than the element present at the current index, to do this use a Self Balancing BST and then for every element find the maximum product that can be formed and take the maximum out of those products. Self Balancing BST is implemented as set in C++ and TreeSet in Java. Algorithm: Declare a self balancing BST (say s). Declare two new arrays left[] and right[] to store the lower bound for arr[i] in left of that element in left[i] and lower bound of arr[i] in right of that element in right[i]. Run a loop from 0 to length – 1 to find the lower bound of arr[i] in left of that element and store it in the left[i]. Run a loop from length -1 to 0 to find the lower bound of arr[i] in right of that element and store it in the right[i]. Run a loop from 0 to length – 1 to find the bitnonic subsequence that can be formed using that element to get the maximum product using the left[] and right[] array. That is for every element maximum product bitonic subsequence that can be formed is left[i] * right[i] * arr[i]. Below is the implementation of the above approach: filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Self Balancing BST set<int> s; set<int>::iterator it; // Left array to store the // maximum smallest value for // every element in left of it int Left[n]; // Right array to store the // maximum smallest value for // every element in right of it int Right[n]; // Loop to find the maximum // smallest element in left of // every element in array for (int i = 0; i < n; i++) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is a maximum smallest element if (it != s.begin()) { it--; Left[i] = *it; } else { Left[i] = -1; } } // Clear Set s.clear(); // Loop to find the maximum // smallest element in right of // every element in array for (int i = n - 1; i >= 0; i--) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is such element exists if (it != s.begin()) { it--; Right[i] = *it; } // If no such element exists. else { Right[i] = -1; } } int ans = -1; // Loop to find the maximum product // bitonic subsequence of size 3 for (int i = 0; i < n; i++) { if (Left[i] > 0 and Right[i] > 0) ans = max(ans, arr[i] * Left[i] * Right[i]); } if (ans < 0) { return -1; } else { return ans; } } // Driver Code int main() { int arr[] = { 1, 8, 3, 7, 5, 6, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function Call cout << maxProduct(arr, n); } chevron_right filter_none Output: 
126
 Performance Analysis: Time Complexity: O(NlogN). Auxiliary Space: O(N). My Personal Notes arrow_drop_up Save Recommended Posts: Maximum product of subsequence of size k Maximum product of an increasing subsequence of size 3 Subsequence of size k with maximum possible GCD Maximum product of an increasing subsequence Find the Increasing subsequence of length three with maximum product Minimal product subsequence where adjacent elements are separated by a maximum distance of K Maximum product quadruple (sub-sequence of size 4) in array Product of all Subsequences of size K except the minimum and maximum Elements Maximum product of a triplet (subsequnece of size 3) in array Longest Bitonic Subsequence in O(n log n) Longest Bitonic Subsequence | DP-15 Printing Longest Bitonic Subsequence Length of longest strict bitonic subsequence Maximum sum bitonic subarray Maximum length subsequence such that adjacent elements in the subsequence have a common factor rrlinus Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Algorithms Arrays Binary Search Tree Competitive Programming subsequence Practice Tags : Arrays Binary Search Tree Algorithms thumb_up 1 To-do Done 2 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Minimum change in given value so that it lies in all given Ranges Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? What is Competitive Programming and How to Prepare for It? Most visited in Arrays Minimum halls required for class scheduling Number of K length subsequences with minimum sum Probability that a random pair chosen from an array (a[i], a[j]) has the maximum sum Find the deleted value from the array when average of original elements is given Sort the numbers according to their product of digits ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reservedhttps://www.geeksforgeeks.org/maximum-product-of-bitonic-subsequence-of-size-3/ Maximum product of bitonic subsequence of size 3 - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Find a pair (n,r) in an integer array such that value of nPr is maximum Minimum increment or decrement operations required to make the array sorted Longest Increasing Subsequence using Longest Common Subsequence Algorithm Minimize the cost of partitioning an array into K groups Find a pair (n,r) in an integer array such that value of nCr is maximum Maximize the Expression | Bit Manipulation Minimum number of additons to make the string balanced Blowfish Algorithm with Examples Count number of Special Set Sentinel Linear Search Check whether two strings can be made equal by copying their characters with the adjacent ones Queries to find the left-most given type integer in a binary array Maximum product of bitonic subsequence of size 3 Given an array arr[] of positive integers of size N, the task is to find the maximum product of bitonic subsequence of size 3. Bitonic Subsequence: subsequence in which elements are first in the increasing order and then decreasing order. Elements in the subsequence are follow this order arr[i] < arr[j] > arr[k] for i < j < k where i, j, k are the index of the given array. Note: If no such element is found then print -1. Examples: Input: arr[] = {1, 8, 3, 7, 5, 6, 7} Output: 126 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 8, 5}, {1, 8, 6}, {1, 7, 6}, {3, 7, 6}, {1, 7, 5}, {3, 7, 5}. Hence the maximum product of bitonic subsequence is 3*7*6 = 126 Input: arr[] = {1, 8, 3, 7} Output: 56 Explanation: Bitonic subsequences of size 3 are {1, 8, 3}, {1, 8, 7}, {1, 7, 3}. Hence the maximum product of bitonic subsequence is 1*8*7 = 56 Recommended: Please try your approach on {IDE} first, before moving on to the solution. Naive Approach:A simple solution is to find the product of all the bitonic subsequences of size 3 and take the maximum among them. Algorithm: Intialize ans to -1, such that if there is no such subsequence then the output will be -1. Iterate over the Array with three nested loops with loop variables as i, j and k for choosing three elements of the array. Check if arr[j] > arr[i] and arr[j] > arr[k] then update the ans with the maximum value between ans and arr[i] * arr[j] * arr[k]. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Intialize ans to -1 if no such // subsequence exist in the array int ans = -1; // Nested loops to choose the three // elements of the array for (int i = 0; i < n - 2; i++) { for (int j = i + 1; j < n - 1; j++) { for (int k = j + 1; k < n; k++) { // Condition to check if // they form a bitonic subsequence if (arr[i] < arr[j] && arr[j] > arr[k]) ans = max( ans, arr[i] * arr[j] * arr[k] ); } } } return ans; } // Driver Code int main() { int arr[] = { 1, 8, 3, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function call cout << maxProduct(arr, n) << endl; } chevron_right filter_none Output: 
56
 Performance Analysis: Time Complexity: As in the above approach, there are three nested loop to find the maximum product of the bitonic subsequence of size 3, hence the Time Complexity will be O(N3). Auxiliary Space: As in the above approach, there is no extra space used, hence the auxiliary space will be O(1). Efficient approach: The idea is to find the largest value on the left side and right side of each index which are smaller than the element present at the current index, to do this use a Self Balancing BST and then for every element find the maximum product that can be formed and take the maximum out of those products. Self Balancing BST is implemented as set in C++ and TreeSet in Java. Algorithm: Declare a self balancing BST (say s). Declare two new arrays left[] and right[] to store the lower bound for arr[i] in left of that element in left[i] and lower bound of arr[i] in right of that element in right[i]. Run a loop from 0 to length – 1 to find the lower bound of arr[i] in left of that element and store it in the left[i]. Run a loop from length -1 to 0 to find the lower bound of arr[i] in right of that element and store it in the right[i]. Run a loop from 0 to length – 1 to find the bitnonic subsequence that can be formed using that element to get the maximum product using the left[] and right[] array. That is for every element maximum product bitonic subsequence that can be formed is left[i] * right[i] * arr[i]. Below is the implementation of the above approach: filter_none edit close play_arrow link brightness_4 code // C++ implemenation to find the // maximum product of the bitonic // subsequence of size 3 #include <bits/stdc++.h> using namespace std; // Function to find the maximum // product of bitonic subsequence // of size 3 int maxProduct(int arr[], int n){ // Self Balancing BST set<int> s; set<int>::iterator it; // Left array to store the // maximum smallest value for // every element in left of it int Left[n]; // Right array to store the // maximum smallest value for // every element in right of it int Right[n]; // Loop to find the maximum // smallest element in left of // every element in array for (int i = 0; i < n; i++) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is a maximum smallest element if (it != s.begin()) { it--; Left[i] = *it; } else { Left[i] = -1; } } // Clear Set s.clear(); // Loop to find the maximum // smallest element in right of // every element in array for (int i = n - 1; i >= 0; i--) { s.insert(arr[i]); it = s.lower_bound(arr[i]); // Condition to check if there // is such element exists if (it != s.begin()) { it--; Right[i] = *it; } // If no such element exists. else { Right[i] = -1; } } int ans = -1; // Loop to find the maximum product // bitonic subsequence of size 3 for (int i = 0; i < n; i++) { if (Left[i] > 0 and Right[i] > 0) ans = max(ans, arr[i] * Left[i] * Right[i]); } if (ans < 0) { return -1; } else { return ans; } } // Driver Code int main() { int arr[] = { 1, 8, 3, 7, 5, 6, 7 }; int n = sizeof(arr) / sizeof(arr[0]); // Function Call cout << maxProduct(arr, n); } chevron_right filter_none Output: 
126
 Performance Analysis: Time Complexity: O(NlogN). Auxiliary Space: O(N). My Personal Notes arrow_drop_up Save Recommended Posts: Maximum product of subsequence of size k Maximum product of an increasing subsequence of size 3 Subsequence of size k with maximum possible GCD Maximum product of an increasing subsequence Find the Increasing subsequence of length three with maximum product Minimal product subsequence where adjacent elements are separated by a maximum distance of K Maximum product quadruple (sub-sequence of size 4) in array Product of all Subsequences of size K except the minimum and maximum Elements Maximum product of a triplet (subsequnece of size 3) in array Longest Bitonic Subsequence in O(n log n) Longest Bitonic Subsequence | DP-15 Printing Longest Bitonic Subsequence Length of longest strict bitonic subsequence Maximum sum bitonic subarray Maximum length subsequence such that adjacent elements in the subsequence have a common factor rrlinus Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Algorithms Arrays Binary Search Tree Competitive Programming subsequence Practice Tags : Arrays Binary Search Tree Algorithms thumb_up 1 To-do Done 2 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Minimum change in given value so that it lies in all given Ranges Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? What is Competitive Programming and How to Prepare for It? Most visited in Arrays Minimum halls required for class scheduling Number of K length subsequences with minimum sum Probability that a random pair chosen from an array (a[i], a[j]) has the maximum sum Find the deleted value from the array when average of original elements is given Sort the numbers according to their product of digits ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reserved