https://www.geeksforgeeks.org/lower-and-upper-bound-theory/ Lower and Upper Bound Theory - GeeksforGeeks GeeksforGeeks x × Suggest a Topic Select a Category Advanced Computer Subject Advanced Data Structure Algorithms Algorithms Quiz Analysis AngularJS Aptitude Arrays Articles Articles Backtracking Binary Search Tree Bit Magic Bootstrap Branch and Bound C C Programs C Quiz C# C# Programs C++ C++ Programs C++ Quiz CAT Combinatorial Competitive Programming Compiler Design Compiler Design Computer Networks Computer Networks Quiz Computer Organization & Architecture Computer Organization and Architecture Computer Subject CS – Placements CSS Data Structures Data Structures DBMS DBMS Quiz Design Pattern DI – Placements Difference Between Digital Electronics & Logic Design Divide and Conquer Dynamic Programming Engineering Mathematics Engineering Mathematics Questions English – Placements Experienced Game Theory GATE GATE CS GBlog Geek on the Top GeeksforGeeks Initiatives GeeksQuiz Geometric GFacts Git Go Language Graph GRE GRE Quiz Greedy Hadoop Hash Heap HTML Internship Interview Experiences ISRO Java Java Programs Java Quiz JavaScript JQuery JS++ Julia Kotlin Linked List Linux-Unix Machine Learning Mathematical Matrix MCQ Misc Node.js Operating Systems Operating Systems Questions Pattern Searching Perl PHP PHP Programs Placements Program Output Programming Language Project Puzzles Python Python Programs Python-Quizzes QA – Placement Quizzes QA – Placements Queue Quizzes Randomized Reasoning – Placements Recursion Ruby Scala School Programming Searching Software Engineering Sorting SQL Stack Strings Technical Scripter TechTips test_cat_june Theory of Computation Theory of Computation & Automata Tree UGC-NET Web Technologies Web technologies Questions Write From Home Submit menu Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript JQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2020 Last Minute Notes GATE CS Solved Papers GATE CS Orignal Papers and Official Keys GATE 2020 Dates GATE CS 2020 Syllabus Important Topics for GATE CS Sudo GATE 2020 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics First Order Logic Combinatorics Set Theory Graph Theory Linear Algebra Probability Calculus Operating Systems Processes, threads, CPU scheduling Process Synchronization Deadlock Memory Management File and Disk Management DBMS Entity Relationship Model Relational Model Normalisation SQL Transactions and concurrency control Computer Networks Basics Data Link Layer Network layer Transport layer Application layer Network Security and Cryptography Computer Organization and Architecture Basics ALU, data‐path and control unit Pipelining Memory Organisation Input and Output Systems Theory of Computation Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Turing Machine Compiler Design Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Runtime Environments Code Generation and Optimization Digital Logic Boolean Algebra and Logic Gates Combinational Logic Circuits Flip-Flops and Sequential Circuits Software Engineering Introduction Software Development Models & Architecture Software Project Management Software Requirements Software Testing and Debugging Web Technologies HTML CSS JavaScript PHP JQuery Students Get Hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competitive Programming Testimonials Geek on the Top Careers Internship Courses Home Algorithms expand_more All Algorithms Analysis of Algorithms Searching Algorithms Sorting Algorithms Graph Algorithms Bit Algorithms Pattern Searching Geometric Algorithms Mathematical Algorithms Randomized Algorithms Game Theory Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch & Bound Data Structures expand_more All Data Structures Array LinkedList Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings Languages expand_more C C++ Java Python SQL PHP Javascript Program Output Interview expand_more Company Prep Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competitive Programming Design Patterns Multiple Choice Quizzes Students expand_more Campus Ambassador Program Geek of the Month Placement Course Project Competitive Programming Testimonials Geek on the Top Careers Internship School Programming GATE expand_more GATE CS Corner GATE Notes Last Minute Notes Official Papers Gate 2018 Important Dates and Links CS Subjects expand_more Operating Systems DBMS Computer Networks Compiler Design Web Technology Computer Organization & Architecture Digital Electronics Engg. Mathematics Theory of Computation Advanced Topics What’s Difference? Quizzes expand_more C C++ Java Python Data Structures Algorithms Operating Systems DBMS Compiler Design Computer Networks Theory of Computation Computer Organization Software Engineering HTML & XML Engg. Mathematics Aptitude GBlog Puzzles What’s New? Special 21 ▲ Lower and Upper Bound Theory Find a pair (n,r) in an integer array such that value of nPr is maximum Minimum increment or decrement operations required to make the array sorted Longest Increasing Subsequence using Longest Common Subsequence Algorithm Color all boxes in line such that every M consecutive boxes are unique Minimize the cost of partitioning an array into K groups Find a pair (n,r) in an integer array such that value of nCr is maximum Maximize the Expression | Bit Manipulation Minimum number of additons to make the string balanced Blowfish Algorithm with Examples Count number of Special Set Sentinel Linear Search Check whether two strings can be made equal by copying their characters with the adjacent ones Queries to find the left-most given type integer in a binary array Lower and Upper Bound Theory The Lower and Upper Bound Theory provides a way to find the lowest complexity algorithm to solve a problem. Before understanding the theory, first lets have a brief look on what actually Lower and Upper bounds are. Lower Bound – Let L(n) be the running time of an algorithm A(say), then g(n) is the Lower Bound of A if there exist two constants C and N such that L(n) <= C*g(n) for n > N. Lower bound of an algorithm is shown by the asymptotic notation called Big Omega (or just Omega). Upper Bound – Let U(n) be the running time of an algorithm A(say), then g(n) is the Upper Bound of A if there exist two constants C and N such that U(n) >= C*g(n) for n > N. Upper bound of an algorithm is shown by the asymptotic notation called Big Oh(O) (or just Oh). 1. Lower Bound Theory: According to the lower bound theory, for a lower bound L(n) of an algorithm, it is not possible to have any other algorithm (for a common problem) whose time complexity is less than L(n) for random input. Also every algorithm must take at least L(n) time in worst case. Note that L(n) here is the minimum of all the possible algorithm, of maximum complexity. The Lower Bound is a very important for any algorithm. Once we calculated it, then we can compare it with the actual complexity of the algorithm and if their order are same then we can declare our algorithm as optimal. So in this section we will be discussing about techniques for finding the lower bound of an algorithm. Note that our main motive is to get an optimal algorithm, which is the one having its Upper Bound Same as its Lower Bound (U(n)=L(n)). Merge Sort is a common example of an optimal algorithm. Trivial Lower Bound – It is the easiest method to find the lower bound. The Lower bounds which can be easily observed on the basis of the number of input taken and the number of output produces are called Trivial Lower Bound. Example: Multiplication of n x n matrix, where, Input: For 2 matrix we will have 2n2 inputs
Output: 1 matrix of order n x n, i.e.,  n2 outputs In the above example its easily predictable that the lower bound is O(n2). Computational Model – The method is for all those algorithms that are comparison based. For example in sorting we have to compare the elements of the list among themselves and then sort them accordingly. Similar is the case with searching and thus we can implement the same in this case. Now we will look at some examples to understand its usage. Ordered Searching – It is a type of searching in which the list is already sorted. Example-1: Linear search Explanation – In linear search we compare the key with first element if it does not match we compare with second element and so on till we check against the nth element. Else we will end up with a failure. Example-2: Binary search Explanation – In binary search, we check the middle element against the key, if it is greater we search the first half else we check the second half and repeat the same process. The diagram below there is an illustration of binary search in an array consisting of 4 elements Calculating the lower bound: The max no of comparisons are n. Let there be k levels in the tree. No. of nodes will be 2k-1 The upper bound of no of nodes in any comparison based search of an element in list of size n will be n as there are maximum of n comparisons in worst case scenario 2k-1 Each level will take 1 comparison thus no. of comparisons k≥|log2n| Thus the lower bound of any comparison based search from a list of n elements cannot be less than log(n). Therefore we can say that Binary Search is optimal as its complexity is Θ(log n). Sorting – The diagram below is an example of tree formed in sorting combinations with 3 elements. Example – For n elements, finding lower bound using computation model. Explanation – For n elements we have a total on n! combinations (leaf nodes). (Refer the diagram the total combinations are 3! or 6) also it is clear that the tree formed is a binary tree. Each level in the diagram indicates a comparison. Let there be k levels => 2k is the total number of leaf nodes in a full binary tree thus in this case we have n!≤2k. As the k in the above example is the no of comparisons thus by computational model lower bond = k. Now we can say that,
n!≤2T(n)
Thus, 
T(n)>|log n!| 
=> n!<=nn
Thus,
log n!<=log nn
Taking ceiling function on both sides, we get
|-log nn-|>=|-log n!-|
Thus complexity becomes Θ(lognn) or Θ(nlogn) Using Lower bond theory to solve algebraic problem: Straight Line Program – The type of programs build without any loops or control structures is called Straight Line Program. For example, filter_none edit close play_arrow link brightness_4 code //summing to nos Sum(a, b) { //no loops and no control structures c:= a+b; return c; } chevron_right filter_none Algebraic Problem – Problems related to algebra like solving equations inequalities etc., comes under algebraic problems. For example, solving equation ax2+bx+c with simple programming. filter_none edit close play_arrow link brightness_4 code Algo_Sol(a, b, c, x) { //1 assignment v:=a*x; //1 assignment v:=v+b; //1 assignment v:=v*x; //1 assignment ans:=v+c; return ans; } chevron_right filter_none Complexity for solving here is 4 (excluding the returning). The above example shows us a simple way to solve an equation for 2 degree polynomial i.e., 4 thus for nth degree polynomial we will have complexity of O(n2). Let us demonstrate via an algorithm. Example: anxn+an-1xn-1+an-2xn-2+…+a1x+a0 is a polynomial of degree n. filter_none edit close play_arrow link brightness_4 code pow(x, n) { p := 1; //loop from 1 to n for i:=1 to n p := p*x; return p; } polynomial(A, x, n) { int p, v:=0; for i := 0 to n //loop within a loop from 0 to n v := v + A[i]*pow(x, i); return v; } chevron_right filter_none Loop within a loop => complexity = O(n2); Now to find an optimal algorithm we need to find the lower bound here (as per lower bound theory). As per Lower Bound Theory, The optimal algorithm to solve the above problem is the one having complexity O(n). Lets prove this theorem using lower bounds. Theorem: To prove that optimal algo of solving a n degree polynomial is O(n) Proof: The best solution for reducing the algo is to make this problem less complex by dividing the polynomial into several straight line problems. => anxn+an-1xn-1+an-2xn-2+...+a1x+a0 
can be written as, 
((..(anx+an-1)x+..+a2)x+a1)x+a0
Now, algorithm will be as,
v=0
v=v+an
v=v*x
v=v+an-1
v=v*x
...
v=v+a1
v=v*x
v=v+a0 filter_none edit close play_arrow link brightness_4 code polynomial(A, x, n) { int p, v=0; // loop executed n times for i = n to 0 v = (v + A[i])*x; return v; } chevron_right filter_none Clearly, the complexity of this code is O(n). This way of solving such equations is called Horner’s method. Here is were lower bound theory works and give the optimum algorithm’s complexity as O(n). 2. Upper Bound Theory: According to the upper bound theory, for an upper bound U(n) of an algorithm, we can always solve the problem in at most U(n) time.Time taken by a known algorithm to solve a problem with worse case input gives us the upper bound. My Personal Notes arrow_drop_up Save Recommended Posts: Scala | Upper bound Scala | Lower Bound Python program to count upper and lower case characters without using inbuilt functions Bound, unbound, and static methods in Python Generate Binary Strings of length N using Branch and Bound Lower Insertion Point The prisoner's dilemma in Game theory Halting Problem in Theory of Computation Mathematics | Graph theory practice questions Minimum number of operations to move all uppercase characters before all lower case characters Game Theory (Normal - form game) | Set 1 (Introduction) Maximum product of bitonic subsequence of size 3 Number of factors of very large number N modulo M where M is any prime number Why Prim’s and Kruskal's MST algorithm fails for Directed Graph? piyush25pv Check out this Author's contributed articles. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Algorithms Analysis Technical Scripter Technical Scripter 2018 Practice Tags : Algorithms thumb_up 23 To-do Done 2.3 Based on 23 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How compare() method works in Java Next last_page Count the number of pop operations on stack to get each element of the array Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Best Books to Learn Back-End Web Development Top Machine Learning Trends in 2019 How to Crack System Design Round in Interviews? What is Competitive Programming and How to Prepare for It? Most visited in Analysis Count total number of even sum sequences Find next greater element with no consecutive 1 in it's binary representation Random list of M non-negative integers whose sum is N Sum of numbers in a range [L, R] whose count of divisors is prime ✍ Write a Testimonial ⇣ 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org COMPANY About Us Careers Privacy Policy Contact Us LEARN Algorithms Data Structures Languages CS Subjects Video Tutorials PRACTICE Courses Company-wise Topic-wise How to begin? CONTRIBUTE Write an Article Write Interview Experience Internships Videos @geeksforgeeks, Some rights reserved